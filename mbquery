#!/usr/bin/python2

# quicktag 'Artist' 'Album'
# -> look up album on musicbrainz
# -> present choices
# -> get track names
# -> present for editing
# -> auto-rename

from __future__ import division, print_function, unicode_literals

import argparse
import os
import subprocess
import sys

import musicbrainzngs as mb
#from pprint import pprint

reload(sys)
sys.setdefaultencoding('utf-8')

mb.set_useragent('quicktag', '0.1')

ALLDISCS = u'(All discs)'

def main():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('-h', '--help', action='store_true', help='print help')
    parser.add_argument('-o', '--output', action='store', help='output file')
    parser.add_argument('artist', nargs='?', help='artist name')
    parser.add_argument('album', nargs='?', help='album name')
    args = parser.parse_args()

    if args.help:
        print("Usage: mbquery [-o tags.txt] \"Artist name\" \"Album title\"")
        sys.exit(1)

    if args.album == None:
        cwd = os.getcwd()
        cwd, album = os.path.split(cwd)
    else:
        album = args.album

    if args.artist == None:
        cwd, artist = os.path.split(cwd)
    else:
        artist = args.artist

    if args.output and args.output != "-" and os.path.exists(args.output):
        print("warning: output file {!r} already exists".format(args.output))

    r, disc = lookup(artist, album)

    if args.output and args.output != "-":
        file = open(args.output, "wt")
    else:
        file = None

    writetags(r, disc, file or sys.stdout)

    if file:
        file.close()

def lookup(artist, album):
    query = u'artist:"{}" "{}"'.format(artist, album)
    releases = mb.search_releases(query)['release-list']
    r = selecta(releases, format_release)
    if not r:
        sys.exit(0)

    r = mb.get_release_by_id(r['id'], includes=['recordings', 'media', 'release-groups', 'labels', 'artist-credits'])
    r = r['release']

    #r['medium-list'] = [x for x in r['medium-list'] if x]
    if len(r['medium-list']) > 1:
        disc = selecta([ALLDISCS] + r['medium-list'], format_medium)
        if not disc:
            sys.exit(1)

        #pprint(r, stream=sys.stderr)
    else:
        disc = r['medium-list'][0]

    return r, disc


def writetags(r, disc, file):
    def write(s=""):
        print(s, file=file)

    write(u'ALBUM={}'.format(r['title']))
    write(u'ARTIST={}'.format(r['artist-credit-phrase']))

    various = r['artist-credit-phrase'] == 'Various Artists'

    release_date = r.get('date', u'')
    original_date = r['release-group']['first-release-date']

    if original_date and release_date and original_date != release_date:
        write(u'DATE={}'.format(original_date))
        write(u'RELEASEDATE={}'.format(release_date))
    elif original_date:
        write(u'DATE={}'.format(original_date))
    elif release_date:
        write(u'DATE={}'.format(release_date))
    else:
        write(u'DATE=')

    if len(r['medium-list']) > 1:
        if disc is not ALLDISCS:
            write(u"DISCNUMBER={}".format(disc['position']))
        write(u"DISCTOTAL={}".format(r['medium-count']))

    write(u"#CATALOGNUMBER=")
    write(u'#MUSICBRAINZ_RELEASE_ID={}'.format(r['id']))
    write(u'#MUSICBRAINZ_RELEASE_GROUP_ID={}'.format(r['release-group']['id']))
    write()

    def print_disc(disc):
        for track in disc['track-list']:
            write(u"TITLE{}={}".format(track['number'].zfill(2), track['recording']['title']))
            if various:
                write(u"ARTIST{}={}".format(track['number'].zfill(2), track['artist-credit-phrase']))

    if disc is ALLDISCS:
        for disc in r['medium-list']:
            print_disc(disc)
            write()
    else:
        print_disc(disc)

    write()
    write("# vim: syntax=plain")

####

def selecta(choices, formatter):
    if not choices:
        return
    proc = subprocess.Popen(['selecta'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    lines = []
    for i, x in enumerate(choices):
        lines.append(u"{} {}".format(i+1, formatter(x)).replace(u"\n", u" "))
    input = "\n".join(lines).encode('utf-8')
    try:
        output, _ = proc.communicate(input)
    except KeyboardInterrupt:
        return
    if proc.returncode != 0:
        return
    num = int(output.split(" ", 1)[0].decode())
    return choices[num - 1]

def format_release(r):
    artist = r.get('artist-credit-phrase')
    date = r.get('date', u'????-??-??')
    title = r.get('title', '<Unknown>')
    trackcount = r.get('track-count', '')
    tracks = u"+".join(str(m['track-count']) for m in r['medium-list'] if m)
    formats = u", ".join(m['format'] for m in r['medium-list'] if 'format' in m)
    country = r.get('country')
    barcode = r.get('barcode')
    #pprint(r)
    s = u"{} {} - {} [{}] ({})".format(date, artist, title, tracks, formats)
    if country:
        s += " (" + country + ")"
    if barcode:
        s += " (" + barcode + ")"
    return s

def format_medium(m):
    if type(m) is unicode:
        return m
    s = "{} tracks".format(m.get('track-count', u'??'))
    if 'format' in m:
        s = m['format'] + ', ' + s
    if 'title' in m:
        s = m['title'] + ', ' + s
    return s

def ms(n):
    if not n:
        return ""
    n = int(n)
    m = n // 60000
    s = n % 60000 / 1000
    s = int(round(s))
    return u"{}:{:02d}".format(m, s)

if __name__ == '__main__':
    main()
