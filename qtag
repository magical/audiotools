#!/usr/bin/env python3
import argparse
import subprocess
import sys
import os

this_dir = os.path.dirname(__file__)

def save_tags(filename, tags, delete_all=False):
    if filename.endswith('.flac'):
        cmd = [ "metaflac" ]
        # TODO: --no-utf8-convert?
        if delete_all:
            cmd.append("--remove-all-tags")
        for k, v in tags:
            cmd.append(b"--set-tag=%s=%s" % (k.encode('utf-8'), v.encode('utf-8')))
        cmd.append(filename)
    elif filename.endswith('.dts') or filename.endswith('.ac3'):
        cmd = [ "python3", os.path.join(this_dir, "ape.py") ]
        if delete_all:
            cmd.append("--delete-all")
        for k, v in tags:
            cmd.append(b"--tag=%s=%s" % (k.encode('utf-8'), v.encode('utf-8')))
        cmd.append(filename)
    #print(cmd)
    subprocess.check_call(cmd)

def get_replaygain_tags(filename):
    if not filename.endswith('.flac'):
        raise Exception("only flac files support --preserve-replaygain=true")

    rg_tags = []
    cmd = [ "metaflac", "--no-utf8-convert", "--export-tags-to=-", filename ]
    output = subprocess.check_output(cmd)
    output = output.decode('utf-8')
    for line in output.splitlines():
        if line.startswith(("REPLAYGAIN_TRACK_", "REPLAYGAIN_ALBUM_")):
            k, _, v = line.partition("=")
            rg_tags.append((k,v))
    return rg_tags

def Bool(s):
    if s in ('true', 't', '1'):
        return True
    if s in ('false', 'f', '0'):
        return False
    if s in ('auto',):
        return None
    raise ValueError(s)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", dest="delete_all", action="store_true", default=False,
                        help="delete all tags")
    parser.add_argument("--preserve-replaygain", type=Bool, nargs="?", metavar="BOOL", const=None, default=None, help="with -d, don't remove replaygain tags")
    parser.add_argument("filenames", nargs="*", help="files to tag")

    args = parser.parse_args()
    filenames = args.filenames

    if not filenames:
        print("Usage: qtag <tags files...")
        sys.exit(1)

    tags = []
    titles = {}
    artists = {}
    versions = {}
    for lineno, line in enumerate(sys.stdin):
        line = line.strip()
        if not line:
            continue

        if line.startswith('#'):
            continue

        if '=' not in line:
            print("{}: invalid syntax".format(lineno+1))
            sys.exit(1)

        k, _, v = line.partition('=')
        if not k:
            print("{}: invalid syntax".format(lineno+1))
            sys.exit(1)

        if k.startswith("TITLE") and k[5:].isdigit():
            titles[int(k[5:])] = v
        elif k.startswith("ARTIST") and k[6:].isdigit():
            artists[int(k[6:])] = v
        elif k.startswith("VERSION") and k[7:].isdigit():
            versions[int(k[7:])] = v
        else:
            if v:
                tags.append((k, v))

    #print(tags)
    #print(titles)

    rg_tags = []
    if args.delete_all and args.preserve_replaygain != False:
        for x in filenames:
            if args.preserve_replaygain == True or (args.preserve_replaygain == None and x.endswith(".flac")):
                rg_tags.append(get_replaygain_tags(x))
            else:
                rg_tags.append([])

    for i, filename in enumerate(filenames):
        num = i+1
        mytags = []
        if num in titles:
            mytags.append(("TITLE", titles[num]))
        if num in versions:
            mytags.append(("VERSION", versions[num]))
        if num in artists:
            mytags.append(("ARTIST", artists[num]))
        mytags += list(tags)
        mytags.append(("TRACKNUMBER", str(num)))
        mytags.append(("TRACKTOTAL", str(len(filenames))))
        if rg_tags and rg_tags[i]:
            mytags += rg_tags[i]
        save_tags(filename, mytags, delete_all=args.delete_all)

if __name__ == '__main__':
    main()
